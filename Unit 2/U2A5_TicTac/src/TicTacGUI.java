/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Atul
 * The purpose of this project is to create a working Tic Tac Toe game in Java with a GUI,
 * to increase the engagement. The program counts the number of times the game has been won, and changes
 * the icons to X and O respectively depending on the turn. The program also has a feature to play
 * again and keep the current values, or reset button so the game does not have to be closed if 
 * you want to reset all the values. I also made some of my own modifications to the given code 
 * that I think work nicely.
 */
import java.awt.*;
import javax.swing.*;
import java.util.Random;
public class TicTacGUI extends javax.swing.JFrame {
   
    ImageIcon back = new ImageIcon("cardback.jpg ");
    ImageIcon x = new ImageIcon("x.jpg");
    ImageIcon o = new ImageIcon("o.jpg");
    //Creating the board where the values will be stored, 0 is not filled, 1 is X, and 2 is O
    // just a reminder ,first is rows second is columns
    int[][] grid = new int[4][4];
    //Creates a new random class to determine who will play first
    Random rd = new Random();
    boolean currentPlayer;
    //Boolean to check whether a game is running
    boolean game = true;
    int xWinCounter = 0; int oWinCounter = 0; int tieCounter = 0;
    int clickCounter = 0; //Checks the amount of clicks
    int checkWin = 0; //Determines if a game has been won
    
    /**
     * Creates new form TicTacGUI
     */
    public TicTacGUI() {
        super ("Tic Tac Toe!");
        initComponents();
        
    }
    /**
     * Finds the winner of the game, if there is one at the time
     */
    public void findWinner() {
        // Goes through each line and checks if the same character is present throughout, meaning there is a win
        for (int i = 0; i < 4; i ++) {
            if ((grid[i][0] == grid[i][1]) && (grid[i][1] == grid[i][2]) && (grid[i][2] == grid[i][3])) {
                if (grid[i][0] == 1) win(1);
                else if (grid[i][0] == 2) win(2);
            }
        }

        // Goes through the columns to see if they are all the same, which results in a win
        for (int i = 0; i < 4; i++){
            if ((grid[0][i]==grid[1][i])&&(grid[1][i]==grid[2][i])&&(grid[2][i]==grid[3][i])) {
                if (grid[0][i]==1) win(1);
                else if (grid[0][i]==2) win(2);
            }
        }

        //Checking the diagonals for a win (since it is a 4x4, there needs to be 2 if statements or else there can be
        //an error that makes it so placing it in gridTile6 makes it an instant win
        if (((grid[0][0]==grid[1][1]) && (grid[1][1]==grid[2][2]) && (grid[2][2]==grid[3][3]))) {
            if (grid[1][1]==1) win(1);
            else if (grid[1][1]==2) win(2);
        }

        if (((grid[3][0]==grid[2][1]) && (grid[2][1]==grid[1][2]) && (grid[1][2]==grid[0][3]))) {
            if (grid[1][2]==1) win(1);
            else if (grid[1][2]==2) win(2);
        }

        // Checks if the game is a tie by seeing if there have been too many clicks
        if (clickCounter == 16 && checkWin == 0) win(3);
    }

    private void win(int winner) {
        checkWin = 1; //Sets the value of checkWin to 1 to show that a game has been won

        if (winner == 1) {
            turnDisplayer.setText("X has won!"); //Displays that X has won
            xWinCounter++; //Adds 1 to X's Win counter
        }
        else if (winner == 2) {
            turnDisplayer.setText("O has won!"); //Displays that X has won
            oWinCounter++; //Adds 1 to O's Win counter
        }
        else if (winner == 3) {
            turnDisplayer.setText("The game is a tie!"); //Displays that the game is a tie
            tieCounter++;
        }

        //Displays the amount of wins for each player
        winDisplayer.setText("X has " + xWinCounter + " wins," + "O has " + 
        oWinCounter + " wins," + "There have been " + tieCounter + " ties");

        game = false; //Turns the game variable to false nothing else can happen until play is pressed
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * The form was edited from outside NetBeans so mouse clicks only work whenever a game is running
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        gridTile1 = new javax.swing.JButton();
        gridTile2 = new javax.swing.JButton();
        gridTile3 = new javax.swing.JButton();
        gridTile4 = new javax.swing.JButton();
        gridTile5 = new javax.swing.JButton();
        gridTile6 = new javax.swing.JButton();
        gridTile7 = new javax.swing.JButton();
        gridTile8 = new javax.swing.JButton();
        gridTile9 = new javax.swing.JButton();
        gridTile10 = new javax.swing.JButton();
        gridTile11 = new javax.swing.JButton();
        gridTile12 = new javax.swing.JButton();
        gridTile13 = new javax.swing.JButton();
        gridTile14 = new javax.swing.JButton();
        gridTile15 = new javax.swing.JButton();
        gridTile16 = new javax.swing.JButton();
        play = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        turnDisplayer = new javax.swing.JTextField();
        winDisplayer = new javax.swing.JTextField();
        title = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gridTile1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile1MouseClicked(evt);
            }
        });

        gridTile2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile2MouseClicked(evt);
            }
        });

        gridTile3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile3MouseClicked(evt);
            }
        });

        gridTile4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile4MouseClicked(evt);
            }
        });

        gridTile5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile5MouseClicked(evt);
            }
        });

        gridTile6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile6MouseClicked(evt);
            }
        });

        gridTile7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile7MouseClicked(evt);
            }
        });

        gridTile8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile8MouseClicked(evt);
            }
        });

        gridTile9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile9MouseClicked(evt);
            }
        });

        gridTile10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile10MouseClicked(evt);
            }
        });

        gridTile11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile11MouseClicked(evt);
            }
        });

        gridTile12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile12MouseClicked(evt);
            }
        });

        gridTile13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile13MouseClicked(evt);
            }
        });

        gridTile14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile14MouseClicked(evt);
            }
        });

        gridTile15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile15MouseClicked(evt);
            }
        });

        gridTile16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cardback.jpg"))); // NOI18N
        gridTile16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if(game) gridTile16MouseClicked(evt);
            }
        });

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        turnDisplayer.setText("No game has been started yet!");

        winDisplayer.setText("X has won 0 times, O has won 0 times, There have been 0 ties");

        title.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        title.setText("Tic Tac Toe!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(turnDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(winDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gridTile1)
                                    .addComponent(gridTile5)
                                    .addComponent(gridTile9)
                                    .addComponent(gridTile13))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gridTile6)
                                    .addComponent(gridTile2)
                                    .addComponent(gridTile10)
                                    .addComponent(gridTile14))
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gridTile3)
                                    .addComponent(gridTile7)
                                    .addComponent(gridTile11)
                                    .addComponent(gridTile15))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gridTile16)
                                    .addComponent(gridTile4)
                                    .addComponent(gridTile8)
                                    .addComponent(gridTile12)))
                            .addComponent(play)
                            .addComponent(exit)
                            .addComponent(reset))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(title)
                        .addGap(245, 245, 245))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gridTile4)
                        .addGap(18, 18, 18)
                        .addComponent(gridTile8)
                        .addGap(18, 18, 18)
                        .addComponent(gridTile12))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(gridTile1)
                                .addGap(18, 18, 18)
                                .addComponent(gridTile5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gridTile2)
                                    .addComponent(gridTile3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gridTile6)
                                    .addComponent(gridTile7))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gridTile9)
                            .addComponent(gridTile10)
                            .addComponent(gridTile11))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridTile13)
                    .addComponent(gridTile14)
                    .addComponent(gridTile15)
                    .addComponent(gridTile16))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(play)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(reset)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(turnDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(winDisplayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Starts the game
     * @param evt 
     */
    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        //Gets the random value from the boolean, and checks what player will start
        boolean startingPlayer = rd.nextBoolean();
        if (startingPlayer == true) { 
            currentPlayer = true; // True = X
            turnDisplayer.setText("It is X's Turn");
        }
        else {
            currentPlayer = false; // False = O
            turnDisplayer.setText("It is O's Turn");
        }
        //Sets the board to default, that is not full
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                grid[i][j] = 0;
            }
        }
        clickCounter = 0; //Reset the click counter to 0
        checkWin =  0; //Makes it so the checkWin variable shows that a game has not been won
        //Fill all the tiles with the backfacing card
        gridTile1.setIcon(back); gridTile2.setIcon(back); gridTile3.setIcon(back); gridTile4.setIcon(back);
        gridTile5.setIcon(back); gridTile6.setIcon(back); gridTile7.setIcon(back); gridTile8.setIcon(back);
        gridTile9.setIcon(back); gridTile10.setIcon(back); gridTile11.setIcon(back); gridTile12.setIcon(back);
        gridTile13.setIcon(back); gridTile14.setIcon(back); gridTile15.setIcon(back); gridTile16.setIcon(back);

        game = true; //Sets the game to true meaning it has started
    }//GEN-LAST:event_playActionPerformed
    /**
     * Exits the game
     * @param evt 
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        //Exits the game
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed
    /**
     * Resets the game and all values from scratch
     * @param evt 
     */
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        //Resetting the win counter
        xWinCounter = 0; oWinCounter = 0; tieCounter = 0;
        //Setting the text back to default
        turnDisplayer.setText("No game has been started yet!");
        winDisplayer.setText("X has won 0 times, O has won 0 times, There have been 0 ties");
        //Making the board empty again
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                grid[i][j] = 0;
            }
        }
        clickCounter = 0; //Reset the click counter to 0
        checkWin =  0; //Makes it so the checkWin variable shows that a game has not been won
        //Fill all the tiles with the backfacing card
        gridTile1.setIcon(back); gridTile2.setIcon(back); gridTile3.setIcon(back); gridTile4.setIcon(back);
        gridTile5.setIcon(back); gridTile6.setIcon(back); gridTile7.setIcon(back); gridTile8.setIcon(back);
        gridTile9.setIcon(back); gridTile10.setIcon(back); gridTile11.setIcon(back); gridTile12.setIcon(back);
        gridTile13.setIcon(back); gridTile14.setIcon(back); gridTile15.setIcon(back); gridTile16.setIcon(back);
        
        game = true;
    }//GEN-LAST:event_resetActionPerformed
    /**
     * Tells the program what to do when a certain tile is clicked, as these are all the same with the only
     * differences being what tile gets changed, only one will be commented
     * @param evt 
     */
    private void gridTile1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile1MouseClicked
        if (currentPlayer == true) { //Checks if the current player is X
            gridTile1.setIcon(x); //Sets the tile to x
            grid[0][0] = 1; //Sets the value in the grid to 1 to show that X has clicked it
            currentPlayer = false; //Changes the player to O
            turnDisplayer.setText("It is O's Turn"); // Then displays that it is O's turn
        }
        else if (currentPlayer == false) { //Checks if the current player is O
            gridTile1.setIcon(o); //Sets the tile to o
            grid[0][0] = 2; //Sets the value in the grid to 2 to show that o has clicked it
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++; //Adds one to the click counter
        findWinner();
    }//GEN-LAST:event_gridTile1MouseClicked

    private void gridTile2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile2MouseClicked
        if (currentPlayer == true) {
            gridTile2.setIcon(x);
            grid[0][1] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile2.setIcon(o);
            grid[0][1] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile2MouseClicked

    private void gridTile3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile3MouseClicked
        if (currentPlayer == true) {
            gridTile3.setIcon(x);
            grid[0][2] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile3.setIcon(o);
            grid[0][2] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile3MouseClicked

    private void gridTile4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile4MouseClicked
        if (currentPlayer == true) {
            gridTile4.setIcon(x);
            grid[0][3] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile4.setIcon(o);
            grid[0][3] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile4MouseClicked

    private void gridTile5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile5MouseClicked
        if (currentPlayer == true) {
            gridTile5.setIcon(x);
            grid[1][0] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile5.setIcon(o);
            grid[1][0] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile5MouseClicked

    private void gridTile6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile6MouseClicked
        if (currentPlayer == true) {
            gridTile6.setIcon(x);
            grid[1][1] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile6.setIcon(o);
            grid[1][1] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile6MouseClicked

    private void gridTile7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile7MouseClicked
        if (currentPlayer == true) {
            gridTile7.setIcon(x);
            grid[1][2] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile7.setIcon(o);
            grid[1][2] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile7MouseClicked

    private void gridTile8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile8MouseClicked
        if (currentPlayer == true) {
            gridTile8.setIcon(x);
            grid[1][3] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile8.setIcon(o);
            grid[1][3] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile8MouseClicked

    private void gridTile9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile9MouseClicked
        if (currentPlayer == true) {
            gridTile9.setIcon(x);
            grid[2][0] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile9.setIcon(o);
            grid[2][0] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile9MouseClicked

    private void gridTile10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile10MouseClicked
        if (currentPlayer == true) {
            gridTile10.setIcon(x);
            grid[2][1] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile10.setIcon(o);
            grid[2][1] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile10MouseClicked

    private void gridTile11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile11MouseClicked
        if (currentPlayer == true) {
            gridTile11.setIcon(x);
            grid[2][2] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile11.setIcon(o);
            grid[2][2] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile11MouseClicked

    private void gridTile12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile12MouseClicked
        if (currentPlayer == true) {
            gridTile12.setIcon(x);
            grid[2][3] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile12.setIcon(o);
            grid[2][3] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile12MouseClicked

    private void gridTile13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile13MouseClicked
        if (currentPlayer == true) {
            gridTile13.setIcon(x);
            grid[3][0] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile13.setIcon(o);
            grid[3][0] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile13MouseClicked

    private void gridTile14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile14MouseClicked
        if (currentPlayer == true) {
            gridTile14.setIcon(x);
            grid[3][1] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile14.setIcon(o);
            grid[3][1] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile14MouseClicked

    private void gridTile15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile15MouseClicked
        if (currentPlayer == true) {
            gridTile15.setIcon(x);
            grid[3][2] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile15.setIcon(o);
            grid[3][2] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile15MouseClicked

    private void gridTile16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gridTile16MouseClicked
        if (currentPlayer == true) {
            gridTile16.setIcon(x);
            grid[3][3] = 1;
            currentPlayer = false;
            turnDisplayer.setText("It is O's Turn");
        }
        else if (currentPlayer == false) {
            gridTile16.setIcon(o);
            grid[3][3] = 2;
            currentPlayer = true;
            turnDisplayer.setText("It is X's Turn");
        }
        clickCounter++;
        findWinner();
    }//GEN-LAST:event_gridTile16MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JButton gridTile1;
    private javax.swing.JButton gridTile10;
    private javax.swing.JButton gridTile11;
    private javax.swing.JButton gridTile12;
    private javax.swing.JButton gridTile13;
    private javax.swing.JButton gridTile14;
    private javax.swing.JButton gridTile15;
    private javax.swing.JButton gridTile16;
    private javax.swing.JButton gridTile2;
    private javax.swing.JButton gridTile3;
    private javax.swing.JButton gridTile4;
    private javax.swing.JButton gridTile5;
    private javax.swing.JButton gridTile6;
    private javax.swing.JButton gridTile7;
    private javax.swing.JButton gridTile8;
    private javax.swing.JButton gridTile9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton play;
    private javax.swing.JButton reset;
    private javax.swing.JLabel title;
    private javax.swing.JTextField turnDisplayer;
    private javax.swing.JTextField winDisplayer;
    // End of variables declaration//GEN-END:variables
}
